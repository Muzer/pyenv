#!/usr/bin/env python
# Warn the user when upgrading board firmware.

import fcntl
import json
import os
import pygtk, gtk, gobject, glib
import sys

class InpMonitor(glib.Source):
    def __init__(self, f):
        glib.Source.__init__(self)

        fd = f.fileno()

        flags = fcntl.fcntl(fd, fcntl.F_GETFL, 0)
        flags |= os.O_NONBLOCK
        fcntl.fcntl(fd, fcntl.F_SETFL, flags)

        self.f = f
        p = glib.PollFD(fd, glib.IO_IN)
        self.pollfd = p
        self.add_poll(p)
        self.data = ""

    def prepare(self):
        pass

    def check(self):
        if self.pollfd.revents:
            return True
        return False

    def dispatch(self, callback, args):
        "Something happened"
        self.data += self.f.read()

        lines = self.data.splitlines()

        if self.data[-1] == "\n":
            self.data = ""
        else:
            self.data = lines[-1]
            self.data = self.data[:-1]

        for l in lines:
            callback( json.loads(l), *args )

        return True

class ProgressWindow(gtk.Window):
    def __init__(self):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
        self.connect("destroy", gtk.main_quit)
        self.set_border_width(30)

        self.vbox = gtk.VBox()
        self.add(self.vbox)

        self.status = gtk.Label("")
        self.status.set_line_wrap(True)
        self.status.set_justify(gtk.JUSTIFY_CENTER)
        self.vbox.pack_end(self.status)

        self.bar = gtk.ProgressBar()
        self.bar.set_pulse_step(0.02)
        self.vbox.pack_end(self.bar)

        message = gtk.Label("Updating board firmware. Do not switch anything off or unplug any cables.")
        message.set_line_wrap(True)
        message.set_justify(gtk.JUSTIFY_CENTER)
        self.vbox.pack_end(message)

        self.inpmon = InpMonitor(sys.stdin)
        self.inpmon.attach()
        self.inpmon.set_callback(self.cb)

    def cb(self, data):
        if "type" in data:
            t = data["type"]
            if t == "pulse":
                self.bar.pulse()
            elif t == "prog":
                self.bar.set_fraction(data["fraction"])

        if "msg" in data:
            self.status.set_label(data["msg"])

prog = ProgressWindow()
prog.show_all()
gtk.main()
